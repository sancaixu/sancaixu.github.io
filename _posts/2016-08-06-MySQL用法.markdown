---
layout: post
title: MySQL的使用
date: 2016-07-31 09:11:24.000000000 +09:00
tags: MySQL

---

#### [1. MySQL支持的SQL语句](#mark-SQL语句)

#### [2. 创建、删除、选择数据库](#mark-createDatabase)

#### [3. 创建、删除表](#mark-createTable)

#### [4. 增加新记录](#mark-insertData)

#### [5. 删除或更新现有记录](#mark-deleteData)

#### [6. 查询信息](#mark-selectData)

#### [7. 创建、删除索引和改变表结构](#mark-alterTable)

#### <a name="mark-SQL语句"></a>一、MySQL支持的SQL语句


创建、丢弃和选择数据库： `CREATE DATABASE`，`DROP DATABASE`，`USE`

创建、更改和丢弃表和索引： `ALTER TABLE`，`CREATE INDEX`，`CREATE TABLE`，`DROP INDEX`，`DROP TABLE`

取数据库、表和查询的有关信息：`DESCRIBE`，`EXPLAIN `，`SHOW`

从表中选择信息：`SELECT`

修改表中信息：`DELETE`，`INSERT`，`LOAD DATA`，`OPTIMIZE TABLE`，`REPLACE`，`UPDATE`

管理语句：`FLUSH`，`GRANT`，`KILL`，`REVOKE`

其他语句：`CREATE FUNCTION`，`DROP FUNCTION`，`LOCK TABLES`，`SET`，`UNLOCK TABLES`


#### <a name="mark-createDatabase"></a>二、创建、删除、选择数据库

##### 2.1 使用`SHOW DATABASES`查看数据库


~~~
-- 查看数据库
SHOW DATABASES;
~~~

![图1](http://images-10054370.cos.myqcloud.com/MYSQL/MySQL%E8%AF%AD%E6%B3%95/%E5%9B%BE1.png)

##### 2.2 使用 `CREATE DATABASE` 创建数据库

创建一个数据库非常简单，只要在 `CREATE DATABASE` 后面加上数据库名就OK拉，如下例：创建了一个叫 **samp_db** 的数据库

~~~
-- 创建数据库
CREATE DATABASE samp_db;
~~~

![图2](http://images-10054370.cos.myqcloud.com/MYSQL/MySQL%E8%AF%AD%E6%B3%95/%E5%9B%BE2.png)


##### 2.3 使用 `USE` 选择数据库

首先使用 `SELECT DATABASE()` 语句查看是不是当前数据库

~~~
-- 查看当前数据库
SELECT DATABASE();
~~~
![图5](http://images-10054370.cos.myqcloud.com/MYSQL/MySQL%E8%AF%AD%E6%B3%95/%E5%9B%BE5.png)

如上图所示，当前的数据库为NULL，我们可以使用 `USE` 语句选择一个数据库，使这个数据库称为当前服务器连接的数据库，用户和上面一样，在 `USE` 后面加上数据库名就可以啦，如下例：

~~~
USE samp_db;
~~~

再次执行 `SELECT DATABASE()` 会看到 **samp_db**已经成为了当前选择的数据库
![图6](http://images-10054370.cos.myqcloud.com/MYSQL/MySQL%E8%AF%AD%E6%B3%95/%E5%9B%BE6.png)

##### 2.4 使用 `DROP DATABASE` 删除数据库

删除数据库更创建数据库一样，只要在 `DROP DATABASE` 后面加上数据库名就可以啦，如下例：

~~~
-- 删除数据库
DROP DATABASE samp_db;
~~~

#### <a name="mark-createTable"></a>三、创建、删除表

##### 3.1 使用 `CREATE TABLE` 创建表

我们用 `CREATE TABLE table_name(column_name column_type);` 语句来完成创建表的工作，如下例：

~~~
-- 创建普通的表

CREATE TABLE samp_table();

-- 使用 `IF NOT EXISTS` 创建一个不存在的表，
如果数据库创建，则创建表失败，但不会报错，如果表不存在则创建成功。

CREATE TABLE IF NOT EXISTS samp_table();

-- 使用 `CREATE TEMPORARY TABLE` 创建临时表，
这些表在会话结束会自动消失，不必费心发布DROP TABLE语句删除这些表

CREATE TEMPORARY TABLE samp_table();

~~~

<mark>为了后面的演示我创建了三个表，学生资料表，学生成绩表，学生每次考试的事件表，学生的出勤表</mark>

~~~
--创建一个学生资料表

CREATE TABLE IF NOT EXISTS student (
    name VARCHAR(20) NOT NULL,
    sex ENUM('F', 'M') NOT NULL,
    city VARCHAR(10) NOT NULL,
    address VARCHAR(20) NOT NULL,
    birth DATE NOT NULL,
    phone INT NULL,
    student_id INT UNSIGNED NOT NULL PRIMARY KEY
)  ENGINE=INNODB DEFAULT CHARSET=UTF8;

-- 创建一个成绩表

CREATE TABLE IF NOT EXISTS score (
    student_id INT UNSIGNED NOT NULL,
    event_id INT UNSIGNED NOT NULL,
    score INT NOT NULL,
    PRIMARY KEY (event_id , student_id)
)  ENGINE=INNODB DEFAULT CHARSET=UTF8;

-- 创建一个事件表，记录考试是测试，还是测验

CREATE TABLE IF NOT EXISTS event (
    event_id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    date DATE NOT NULL,
    type ENUM('T', 'Q') NOT NULL
)  ENGINE=INNODB DEFAULT CHARSET=UTF8;

-- 创建一个出勤表

CREATE TABLE IF NOT EXISTS attendance (
    date DATE NOT NULL,
    student_id INT UNSIGNED NOT NULL,
    attendance_id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY
)  ENGINE=INNODB DEFAULT CHARSET=UTF8;
~~~

使用 `SHOW COLUMNS FROM student;` 查看如图所示

![图7](http://images-10054370.cos.myqcloud.com/MYSQL/MySQL%E8%AF%AD%E6%B3%95/%E5%9B%BE7.png)

实例解析:

* `NULL` 表示此列的值不一定要输入，`NOT NULL` 表示此列的值必须填入。
* `AUTO_INCREMENT` 是MySQL中的一个特殊属性。
* `ENGINE` 是表的引擎类型，缺省值为`INNODB`
* `CHARSET` 设置MySQL的字符集
* `IF NOT EXISTS` 判读表是否存在
* `PRIMARY KEY` 用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。
* `ENUM` 类型非常有用。我们可以用 CHAR(1) 来代替它,但是 ENUM 更明确规定了列可 以取什么值。如果对包括一个 ENUM 列的表发布一条 `DESCRIBE tbl_name` 语句,MySQL 将 确切地显示可取的值有哪些。此列还可以定义为 `ENUM (‘female’,‘male’)`。

##### 3.2 使用 `DROP TABLE` 删除表

删除表比创建表简单很多，只要在 `DROP TABLE` 后面加上表名就可以啦，如下例：删除了一个叫 **samp_table** 的表

~~~
-- 删除表
DROP TABLE samp_table;

-- 删除多表
DROP TABLE tbl1,tbl2,····;
DROP TABLES tbl1,tbl2,····;

-- 如果不能肯定这个表是否存在，可在语句中增加 IF EXISTS。
DROP TABLE IF EXISTS samp_table;
~~~



#### <a name="mark-insertData"></a>四、增加新记录

##### 4.1 给所有的列赋值

`INSERT INTO tbl_name VALUES(value1,value2,·····);` 这种方法插入的数据必须与你创建表时参数的顺序一致。 例如：

~~~
INSERT INTO student VALUES('李明','F','北京','昌平区，云趣园二区','1990-01-15','18210106666',1);
INSERT INTO score VALUES(1,1,95);
INSERT INTO event VALUES(1,'2011-05-06','T');
INSERT INTO attendance VALUES('2011-04-03',1,1);
~~~
![图8](http://images-10054370.cos.myqcloud.com/MYSQL/MySQL%E8%AF%AD%E6%B3%95/%E5%9B%BE8.png)

**如果参数不一致会报错**

![图9](http://images-10054370.cos.myqcloud.com/MYSQL/MySQL%E8%AF%AD%E6%B3%95/%E5%9B%BE9.png)

##### 4.2 一次性给表插入多条数据

MySQL 允许通过指定多个值得列表，利用单个的 `INSERT`语句将几行插入一个表中，
这比多个INSERT语句的键入工作要少，而且服务器执行的效率也更高。

`INSERT INTO tbl_name VALUES(...),(...),...`

例如:
	
~~~
INSERT INTO student VALUES
('刘能','F','湖南','长沙，福田区','1992-03-20','18210104444',2),
('刘小红','M','广州','深圳，南湖区','1991-10-15','18210105555',3),
('欧阳燕','M','北京','海淀区，永泰庄','1990-07-07','18210103333',4);

INSERT INTO score VALUES
(2,2,95),
(3,3,50),
(4,4,65);
INSERT INTO event VALUES
(2,'2011-05-06','T'),
(3,'2011-05-06','T'),
(4,'2011-05-06','T');
INSERT INTO attendance VALUES
('2011-04-07',2,2),
('2011-04-07',1,3),
('2011-04-20',3,4),
('2011-04-10',4,5);
~~~


##### 4.3 也可以给出要赋值的列，然后在列出值，

`INSERT INTO tbl_name
 (col_name1,col_name,...) 
 VALUES(value1,value2,...);`

例如:

~~~
INSERT INTO student (name,sex) VALUES('曾小宝','F');
//自MySQL3.22.5版本以来,这种形式的INSERT也允许多个值
INSERT INTO student (name,sex) VALUES('Abby','F'),('Kyle','M');
~~~

在列中未给出名称的列都讲赋予缺省值。

##### 4.4 自MySQL 3.22.10 以来，可以用 `col_name=value` 的形式给出列和值。
	
`INSERT INTO tbl_name SET col_name1=value1,col_name2=value2,····;`

例如:

~~~
INSERT INTO student name='kyll',sex='F';
~~~

#### <a name="mark-deleteData"></a>五、删除或更新现有记录

我们使用 `DELETE` 和 `UPDATE` 对表进行删除和更新的操作。

##### 5.1 使用 DELETE 删除数据

`DELETE` 语句有如下格式：

~~~
DELETE FROM tbl_name WHERE 要删除的记录
~~~

`WHERE` 子句指定哪些记录应该删除。他是可选的，但是如果不选的话，将会删除所有记录。

~~~
-- 清楚缺勤表中的所有内容
DELETE FROM attendance;
-- 删除时间为2011-04-07那天的缺勤记录
DELETE FROM attendance WHERE date='2011-04-07';
-- 删除时间为2011-04-07且student_id等于2的缺勤记录
DELETE FROM attendance WHERE date='2011-04-07' AND student_id=2;
~~~ 

##### 5.2 使用 UPDATE 修改现有记录

`UPDATE` 语句有如下格式：

~~~
UPDATE tbl_name SET 要更改的列
WHERE 要更新的记录
~~~

这里的 `WHERE` 子句也更 `DELETE` 语句一样，是可选的，如果不指定的话，表中的每个记录都被更新。

~~~
-- 将所有学生的名字改为小明
UPDATE student SET name="小明";
-- 对李明的电话进行修改
UPDATE student SET phone = '17077777777' WHERE name = '李明';
-- 对多个列进行修改
UPDATE student SET phone = '17077778888', name = '小明' WHERE name = '李明';

~~~ 

#### <a name="mark-selectData"></a>六、查询信息

我们用`SELECT`语句检索和显示表中的信息。`SELECT`语句有几个子句，可以更具需要用来检索感兴趣的信息。每个子句都可以简单、可复杂。`SELECT` 语句一般的形式为：

~~~
	SELECT 要查询的东西 
	FROM 指定检索数据的表，表可以是一个或多个，多个表间用逗号隔开 
	WHERE 数据必须满足的条件
~~~

##### 6.1 查询所有数据

如果 `WHERE` 子句不指定条件，则查询所有数据，用`*`表示所有列，如下例：

~~~
-- 查询所有学生的数据
SELECT * FROM student;
~~~

也可以明确的命名希望得到一列或多列，如果字需要查看学生的姓名，如下例：

~~~
-- 查询所有学生的名字
SELECT name FROM student;
~~~

如果想查询学生名和学生的电话号码，只需将列名用逗号分开就会，如下例：

~~~
-- 查询所有学生的名字和电话号码
SELECT name,phone FROM student;
~~~

##### 6.2 使用 WHERE 指定条件限定检索结果

##### 6.2.1 查找数值

~~~
-- 查找成绩大于95分的人
SELECT * FROM score WHERE score > 95
~~~
##### 6.2.2 查找串值（一般串的比较不区分大小写）

~~~
SELECT name FROM student WHERE name='小明';

SELECT name FROM student WHERE name='欧阳燕';
~~~

##### 6.2.3 也可以查找日期值

~~~
-- 查找1991年以后出生的学生
SELECT name,birth FROM student WHERE birth > '1991-1-1';
~~~

##### 6.2.4 也可以搜索组合值

~~~
SELECT name, birth, state FROM president WHERE birth > '1991-1-1' AND (city='北京' OR city='湖南');
~~~

##### 6.2.5 关于 NULL 值

`NULL`值是特殊的，因为他代表的是“无值”。不可能以评估两个已知值的相同方式来讲他与已知值进行评估。不能讲NULL与他自身比较，因为不可能知道比较两个未知值得结果

为了进行NULL值得搜索必须采用特殊的语法不能用 `=` 或者 `!=`来测试等于 `NULL` 或者不等于`NULL`，取而代之的是使用`IS NULL` 或者 `IS NOT NULL` 来测试。

~~~
-- 查询没有添加手机号码的学生
SELECT name, phone FROM student WHERE phone IS NULL;
-- 查询添加了手机号码的学生
SELECT name, phone FROM student WHERE phone IS NOT NULL;
~~~

<mark>注意：</mark>在MySQL 3.23 及以后的版本具有一个特殊的比较运算符**`<=>`** 即使是NULL与NULL的比较他也是可行的，可以将前面的两个查询重写为

~~~
-- 查询没有添加手机号码的学生
SELECT name, phone FROM student WHERE phone <=> NULL;
-- 查询添加了手机号码的学生
SELECT name, phone FROM student WHERE NOT (phone <=> NULL);
~~~

##### 6.2.6 使用 ORDER BY 对查询结果进行排序

当我们对一个表发布一条 `SELECT * FROM tbl_name;` 查询，检索出的行与这些行被插入的顺序是相同的。在这种情况下是有规律的，但是当表进行了行的删除和插入的时候，就会发现服务器返回表的行次序被改变了。（删除记录在表中留下了未使用的“空位”，MySQL在以后插入新记录时将会试图对其填补。）为了进行排序，可使用`ORDER BY` 子句：

1、 对学生的名字进行排序

~~~
SELECT name FROM student ORDER BY name;
~~~ 

2、 使用 `ASC` 或者 `DESC` 关键字指定排序是升序还是降序。

<mark>注：</mark>如果对可能包含 `NULL` 值得列进行排序时，如果是升序排序，`NULL` 值出现在最前面，如果是降序， `NULL` 值出现在最后。

~~~
-- 按降序排列，在不指定ASC和DESC的情况下，缺省值为升序。
SELECT name FROM president ORDER BY name DESC;

-- 查询结果可在多个列上进行排序，每个列的升序或降序可以互相独立。
SELECT name, birth FROM student ORDER BY name DESC, birth ASC;
~~~

##### 6.2.7 使用 LIMIT 对查询的结果进行限制

如果一个查询可以返回许多行，但如果只想看其中的几行，可以使用`LIMIT` 子句，特别是与ORDER BY 子句结合是更是如此。

1、下面的查询选择了前五个年龄最大的学生

~~~
SELECT name,birth FROM student ORDER BY birth LIMIT 5;
~~~

2、 当然也可以使用 `LIMIT num1,num2` 子句进行查询，**num1**代表的是你希望看到的第一个记录的位置，**num2**代表的是你希望看到的记录个数。例如：

~~~
SELECT name,birth FROM student ORDER BY birth LIMIT 2,3;
~~~

3、 也可有使用`RAND()`与`LIMIT`结合，从president表中随机抽取一个记录：

~~~
SELECT name FROM student ORDER BY RAND() LIMIT 1;
~~~

##### 6.2.8 计算并命名输出的列值

1、 使用表达式也可以引用表列，例如：

~~~
SELECT CONCAT("姓名：",name," 出生日期: ",birth) FROM student;
~~~
![图10](http://images-10054370.cos.myqcloud.com/MYSQL/MySQL%E8%AF%AD%E6%B3%95/%20%E5%9B%BE10.png)

2、 给列名名别名

上面这个查询把名和姓连接起来，中间间隔一个空格，将总统的名形成一个单一的字符串，而且将出生城市和州连接在一起，中间隔一个逗号，形成出生地。这样表达式可能会很长，我们可以利用 `AS name` 结构来重新命名标题，或者叫别名。例如：

~~~
SELECT CONCAT("姓名：",name," ","出生日期: ",birth) AS 姓名和出生日期 FROM student;
-- 如果别名包含空格需用双引号括起来。
SELECT CONCAT("姓名：",name," ","出生日期: ",birth) AS "姓名 生日" FROM student;
~~~

![图11](http://images-10054370.cos.myqcloud.com/MYSQL/MySQL%E8%AF%AD%E6%B3%95/%E5%9B%BE11.png)

##### 6.2.9 使用日期

1、根据精确的日期查找

~~~
-- 查询出生日期为1990-1-15学生的资料
SELECT * FROM student WHERE birth = "1990-1-15";
~~~

2、 根据日期的范围查找

~~~
-- 查询出生日期在90年到93年之间学生的资料
SELECT * FROM student WHERE birth >= "1990-01-01" AND birth < "1992-12-31";
~~~

3、 也可以使用 `YAER()`、`MONTH()`、`DAYOFMONTH()`这样的函数去检索日期的成分。

~~~
-- 查找月份为3的日期值，找出3月份出生的学生
SELECT * FROM student WHERE MONTH(birth) = 3;

-- 上面这个查询也可以按月的名称写出：
SELECT * FROM student WHERE MONTHNAME(birth) = "March";
~~~

为了更详细也可以详细到天，可组合测试 `MONTH()`和`DAYOFMONTH()`

~~~
SELECT * FROM student WHERE MONTH(birth) = 1 AND DAYOFMONTH(birth) = 15;
~~~

4、 也可以用`CURRENT_DATE`来进行比较

~~~
-- 查询有没有学生是今天生日的。
SELECT * FROM student WHERE MONTH(birth) = MONTH(CURRENT_DATE) AND DAYOFMONTH(birth) = DAYOFMONTH(CURRENT_DATE);
~~~

6、 自MySQL 3.22以来，可使用`DATE_ADD()`或者`DATE_SUB()`从一个日期计算另一个日期。这些函数取一个日期及时间间隔并产生一个新的日期值。例如：

~~~
-- 当前时间加10年
SELECT DATE_ADD("1970-1-1", INTERVAL 10 YEAR);
-- 当前时间减10年
SELECT DATE_SUB("1970-1-1", INTERVAL 10 YEAR);
~~~

##### 6.2.10 使用 LIKE 进行模式匹配

`LIKE`运算符是是用来匹配通配符指定模式的文本值，这里通常有两个通配符与`LIKE`一起使用

* 百分号（%）代表零个、一个或多个数字或字符。

* 下划线（_）代表一个单一的数字或字符，这些符号可以被组合使用

语法基本如下：

~~~
//1.匹配以“W” 或者“w”开头的名字的名字
SELECT name FROM student WHERE name LIKE "W%";
//2.匹配任意位置包含“W” 或者“w”的名字
SELECT name FROM student WHERE name LIKE "%W%";
//3.查找第二为“H” 或者“h”的名字
SELECT name FROM student WHERE name LIKE "_h%";
//4.查找以"W"开头,第三位为“H” 或者“h”的名字，且长度至少为三个字符的任意值
SELECT name FROM student WHERE name LIKE "W_%_%";
//5.查找以”r“结尾的任意值
SELECT name FROM student WHERE name LIKE "%r";
~~~

##### 6.2.11 统计


1、 使用 `DISTINCT` 关键字删除结果中重复行

~~~
-- 查找出学生的出生地
SELECT DISTINCT city FROM student ORDER BY city;
~~~
2、 使用 `COUNT()` 函数进行计数

如使用 `COUNT(*)`，他将给出查询所选择的行数。如果一个查询无WHERE子句，`COUTN(*)`将给出表中的行数。例如：

~~~
-- 查询班上有多少学生
SELECT COUNT(*) FROM student;
~~~

如果查询有`WHERE`子句，`COUNT(*)` 将给出此子句选择多少行。例如：

~~~
-- 目前为止班上进行了多少次测试
SELECT COUNT(*) FROM event WHERE type = 'Q';
~~~

`COUNT(*)` 对选中的行进行计数。而 `COUNT(col_name)` 只对非NULL值进行计数。下面的查询说明了这些差异：

~~~
SELECT COUNT(*), COUNT(address),COUNT(phone) FROM student;
~~~

也可以将 `DISTINCT` 和 `COUNT()` 组合对选择结果进行统计：

~~~
SELECT COUNT(DISTINCT city) FROM student;
~~~

也可以和 `WHERE` 子句一起使用，例如查找有多少男孩和女孩

~~~
SELECT COUNT(*) FROM student WHERE sex = 'f';
SELECT COUNT(*) FROM student WHERE sex = 'm';
~~~

上面的子句比较繁琐，MySQL可以利用单个查询对一个列中的不同值进行计数。因此，针对上面的查询，可以简化为：

~~~
SELECT sex, COUNT(*) FROM student GROUP BY sex;
~~~

使用 `GROUP BY` 对查询出的结果进行排序

~~~
SELECT city, COUNT(*) AS count FROM student GROUP BY city ORDER BY count DESC;
~~~

`COUNT` 可与 `ORDER BY` 和 `LIMIT` 组合来查找 `student`表中4个学生最多的省份。

~~~
SELECT city , COUNT(*) AS count FROM student GROUP BY city ORDER BY count DESC LIMIT 4;
~~~

如果不想用 `LIMIT` 子句来限制查询输出，也可以使用 `HAVING` 子句。例如查询，班上有两个以上的同学在一个省份的结果：

~~~
SELECT city , COUNT(*) AS count FROM student GROUP BY city HAVING count > 1 ODER BY count DESC;
~~~

除了 `COUNT()` 外还有许多的汇总函数。如 `MIN()`	、`MAX()`、`SUM()`、`AVG` 函数在确定列的最大、最小、总数和平均值时非常有用。例如：

~~~
SELECT event_id ,
MIN(score) AS minimum,
MAX(score) AS maximum,
MAX(score) - MIN(score)+1 AS range,
SUM(score) AS total,
AVG(score) AS average,
COUNT(score) AS count,
FROM score
GROUP BY event_id;
~~~

##### 6.2.12 从多表中检索信息

1、 对特定日期的学分进行选择查询：

~~~
SELECT student_id ,date,score, type FROM event, score
WHERE date = '1999-09-23' 
AND event.event_id = score.event_id;
~~~

<mark>注：</mark>

	* FROM 子句给出了不止一个表名，因为我们要检索的数据不止来自一个表：

	* WHERE 子句说明event 和 score表是由每个表中的event_id值得匹配连接起来的。

一般连接中我们应该对每个列都进行限定以便清晰地表示出每个列属于哪个表。查询如下：

~~~
SELECT score.student_id,event_date,score.score,event.type 
FROM event ,score
WHERE event.date = "1999-09-23"
AND event.even_id = score.event_id
~~~

2、 汇总学生的缺勤情况，查询如下：

~~~
SELECT student.student_id, student.name, 
COUNT(attendance.date) AS absence
FROM student , attendance
WHERE student.student_id = absence.student_id
GROUP BY sudent.student_id
~~~

3、 `LEFT JOIN` 的使用，`LEFT JOIN` 不涉及上述 `WHERE` 子句的学生，得到的是每个学生的输出结果，即使那些在absence表中未给出的学生也都包括在输出中。查询如下：

~~~
SELECT s.student_id,s.name,
COUNT(absence.date) as absences
FROM student AS s LEFT JOIN absence
ON student.student_id = absence.student_id
GROUP BY student.student_id;
~~~


#### <a name="mark-alterTable"></a>七、创建、删除索引和改变表结构

##### 7.1  创建索引

在执行 `CREATE TABLE` 语句时，可为新表创建索引，也可以用 `CREATE INDEX`或者`ALTER TABLE` 来为一个已有的表增加索引。`ALTER TABLE`最为常用，因为可用它来创建普通索引、`UNIQUE` 索引或`PRIMARY KEY`索引，如：

1、 使用`ALTER TABLE` 创建索引

~~~
-- 其中 tbl_name 是表名，cloumn_list 是指对那些列进行索引，如果索引不止一列组成，个列之间用逗号隔开。索引名 index_name 是可选的，可以不写它。

ALTER TABLE tbl_name ADD INDEX index_name(cloumn_list);

ALTER TABLE tbl_name ADD UNQIUE index_name(cloumn_list);

ALTER TABLE tbl_name ADD PRIMARY KEY index_name(cloumn_list);
~~~

2、 使用`CREATE INDEX` 创建索引

~~~
-- CREATE INDEX 可对表增加普通索引或者UNIQUE索引

CREATE UNIQUE INDEX index_name ON tbl_name(cloumn_list);

CREATE INDEX index_name ON tbl_name(cloumn_list);
~~~

在创建新表时创建索引

~~~
CREATE TABLE tbl_name
(
	···
	INDEX index_name(cloumn_list),
	UNIQUE index_name(cloumn_list),
	PRIMARY KEY (cloumn_list)
	···

);
~~~

##### 7.2 使用 `DROP INDEX` 或者 `ALTER TABLE` 删除索引

可以用 `DROP INDEX` 或 `ALTER TABLE` 语句来删除索引，跟创建索引类似。如下例：

~~~
DROP INDEX index_name ON tbl_name;

ALTER TABLE tbl_name DROP INDEX index_name;

-- 只在删除 PRIMARY KEY 时使用

ALTER TABLE tbl_name DROP PRIMARY KEY;
~~~


##### 7.3 使用 `ALTER TABLE` 修改表

`ALTER TABLE` 语法如下：

每个 action 表示对表的一个修改 

`ALTER TABLE tbl_name action,····;`


~~~
-- 对表重新命名
ALTER TABLE tbl_name RENAME AS new_tbl_name;

-- 更改列类型
ALTER TABLE my_tbl MODIFY name CHAR(15);
ALTER TABLE my_tbl CHANGE name name CHAR(15);

ALTER TABLE my_tbl MODIFY i MEDIUMINT UNSIGNED;
ALTER TABLE my_tbl CHANGE i i MEDIUMINT UNSIGNED;

-- CHANGE 可以做 MODIFY不能做的一桩事，CHANGE出了能更改类型外还能更改列名。
ALTER TABLE my_tbl CHANGE i j MEDIUMINT UNSIGNED;

~~~






